mean <- df_fl %>% group_by(lake) %>%
summarize(mu=mean(length))
#calculate mean for lake b
mu_b <- df_fl %>%
filter(lake == "b") %>%
pull(length) %>%
mean()
# difference beten two groups
b <- mu_b - mu_a
#compare with t-test
## lm summary
summary(m)
# apply t-test
a <- df_fl %>%
filter(lake == "b") %>%
pull(length)
b <- df_fl %>%
filter(lake == "b") %>%
pull(length)
t.test(b, a)
#anova
df_anova <- read_csv(here::here("data_Raw/data_fish_length_anova.csv"))
lm(length ~ lake,
data = df_anova)
#get difference from lake a
df_mu <- df_anova %>%
group_by(lake) %>%
summarize(mu = mean(length)) %>%
arrange(lake) %>%
pull(mu)
# do anova with aov()
m_aov <-aov(length ~ lake, data = df_anova)
# compare the lm() and aov() output
summary(m_aov)
# combine different predictors --------------------------------------------
iris <- as_tibble(iris)
# develop iris model
m_iris <- lm(Petal.Length ~ Petal.Width + Species,
data = iris)
summary(m_iris)
# create a data frame for prediction
# variable names must be identical to the original dataframe for analysis
n_rep <- 100
df_pred <- tibble(Petal.Width = rep(seq(min(iris$Petal.Width),
max(iris$Petal.Width),
length = n_rep),
n_distinct(iris$Species)),
Species = rep(unique(iris$Species),
each = n_rep))
# make prediction based on supplied values of explanatory variables
y_pred <- predict(m_iris,
newdata = df_pred)
df_pred <- df_pred %>%
mutate(y_pred = y_pred)
print(df_pred)
iris %>%
ggplot(aes(x = Petal.Width,
y = Petal.Length,
color = Species)) +
geom_point(alpha = 0.5) +
geom_line(data = df_pred,
aes(y = y_pred)) # redefine y values for lines; x and color are inherited from ggplot()
?shapiro.test
View(m_iris)
View(as.data.frame(m_iris))
View(as.data.frame(m_iris))
s_test <- shapiro.test(m_iris)
m_iris <- as.numeric(m_iris)
library(tidyverse)
library(dbplyr)
m_iris <- as.numeric(m_iris)
s_test <- shapiro.test(m_iris)
s_test <- shapiro.test(m_iris$x)
view(m_iris)
view(m_iris)
View(m_iris)
s_test <- shapiro.test(m_iris$residuals)
s_test <- shapiro.test(m_iris$residuals)
s_test
eps <- resid(m_iris)
shapiro.test(eps)
s_test
summary(m_iris)
y_intercepts <- m_iris$coefficients
y_intercepts
y_intercept_setosa <- y_intercepts(filter == "(Intercept)")
y_intercept_setosa <- y_intercepts(filter == "Speciesversicolor")
y_intercepts <- m_iris$coefficients[1]
y_intercepts
y_intercept_versicolor <- m_iris$coefficients[2]
y_intercept_setosa <- m_iris$coefficients[1]
y_intercept_versicolor <- m_iris$coefficients[3]
y_intercept_virginica <- m_iris$coefficients[4]
y_intercept_virginica
y_intercept_setosa
y_intercept_versicolor
y_intercept_virginica
# develop iris model
m_iris <- lm(Petal.Length ~ Petal.Width ,
data = iris)
summary(m_iris)
# develop iris model
m_iris1 <- lm(Petal.Length ~ Petal.Width ,
data = iris)
summary(m_iris1)
m_iris1 %>%
ggplot(aes(x = Petal.Width,
y = Petal.Length,
color = Species)) +
geom_point(alpha = 0.5) +
geom_line(data = df_pred,
aes(y = y_pred)) # redefine y values for lines; x and color are inherited from ggplot()
m_iris1 %>%
ggplot(aes(x = Petal.Width,
y = Petal.Length,)) +
geom_point(alpha = 0.5) +
geom_line(data = df_pred,
aes(y = y_pred)) # redefine y values for lines; x and color are inherited from ggplot()
m_iris1 %>%
ggplot(aes(x = Petal.Width,
y = Petal.Length)) +
geom_point(alpha = 0.5) +
geom_line(data = df_pred,
aes(y = y_pred)) # redefine y values for lines; x and color are inherited from ggplot()
length = n_rep)
length = n_rep))
df_pred1 <- tibble(Petal.Width = rep(seq(min(iris$Petal.Width),
m_iris1 <- lm(Petal.Length ~ Petal.Width ,
data = iris)
m_iris1 <- lm(Petal.Length ~ Petal.Width,
data = iris)
m_iris1 <- lm(Petal.Length ~ Petal.Width,
data = iris)
df_pred1 <- tibble(Petal.Width = rep(seq(min(iris$Petal.Width),
max(iris$Petal.Width),
length = n_rep),
n_distinct(iris$Species)),
Species = rep(unique(iris$Species),
each = n_rep))
n_distinct(iris$Species))
df_pred1 <- tibble(Petal.Width = rep(seq(min(iris$Petal.Width),
max(iris$Petal.Width),
length = n_rep),
n_distinct(iris$Species)))
m_iris1 %>%
ggplot(aes(x = Petal.Width,
y = Petal.Length)) +
geom_point(alpha = 0.5) +
geom_line(data = df_pred1,
aes(y = y_pred)) # redefine y values for lines; x and color are inherited from ggplot()
df_pred1 <- tibble(Petal.Width = rep(seq(min(iris$Petal.Width),
max(iris$Petal.Width),
length = n_rep)))
m_iris1 <- lm(Petal.Length ~ Petal.Width,
data = iris)
summary(m_iris1)
m_iris1 %>%
ggplot(aes(x = Petal.Width,
y = Petal.Length)) +
geom_point(alpha = 0.5) +
geom_line(data = df_pred1,
aes(y = y_pred)) # redefine y values for lines; x and color are inherited from ggplot()
y_intercept_setosa
y_intercept_versicolor
y_intercept_virginica
x1 <- y_intercept_setosa + y_intercept_versicolor
x2 <- y_intercept_setosa + y_intercept_virginica
View(Iris)
View(iris)
head(iris)
df_pred <- tibble(Petal.Width = rep(seq(min(iris$Petal.Width),
max(iris$Petal.Width),
length = n_rep)))
# create a data frame for prediction
# variable names must be identical to the original dataframe for analysis
# develop iris model
m_iris <- lm(Petal.Length ~ Petal.Width,
data = iris)
summary(m_iris)
n_rep <- 100
df_pred <- tibble(Petal.Width = rep(seq(min(iris$Petal.Width),
max(iris$Petal.Width),
length = n_rep)))
# make prediction based on supplied values of explanatory variables
y_pred <- predict(m_iris,
newdata = df_pred)
df_pred <- df_pred %>%
mutate(y_pred = y_pred)
print(df_pred)
iris %>%
ggplot(aes(x = Petal.Width,
y = Petal.Length,
color = Species)) +
geom_point(alpha = 0.5) +
geom_line(data = df_pred,
aes(y = y_pred)) # redefine y values for lines; x and color are inherited from ggplot()
iris %>%
ggplot(aes(x = Petal.Width,
y = Petal.Length)) +
geom_point(alpha = 0.5) +
geom_line(data = df_pred,
aes(y = y_pred)) # redefine y values for lines; x and color are inherited from ggplot()
# create a data frame for prediction
# variable names must be identical to the original dataframe for analysis
# develop iris model
m_iris1 <- lm(Petal.Length ~ Petal.Width,
data = iris)
summary(m_iris)
n_rep <- 100
df_pred <- tibble(Petal.Width = rep(seq(min(iris$Petal.Width),
max(iris$Petal.Width),
length = n_rep)))
# make prediction based on supplied values of explanatory variables
y_pred <- predict(m_iris1,
newdata = df_pred)
df_pred <- df_pred %>%
mutate(y_pred = y_pred)
print(df_pred)
iris %>%
ggplot(aes(x = Petal.Width,
y = Petal.Length)) +
geom_point(alpha = 0.5) +
geom_line(data = df_pred,
aes(y = y_pred)) # redefine y values for lines; x and color are inherited from ggplot()
# create a data frame for prediction
# variable names must be identical to the original dataframe for analysis
# develop iris model
m_iris1 <- lm(Petal.Length ~ Petal.Width,
data = iris)
summary(m_iris1)
n_rep <- 100
df_pred <- tibble(Petal.Width = rep(seq(min(iris$Petal.Width),
max(iris$Petal.Width),
length = n_rep)))
# make prediction based on supplied values of explanatory variables
y_pred <- predict(m_iris1,
newdata = df_pred)
df_pred <- df_pred %>%
mutate(y_pred = y_pred)
print(df_pred)
iris %>%
ggplot(aes(x = Petal.Width,
y = Petal.Length)) +
geom_point(alpha = 0.5) +
geom_line(data = df_pred,
aes(y = y_pred)) # redefine y values for lines; x and color are inherited from ggplot()
df_pred <- tibble(Petal.Width = seq(min(iris$Petal.Width),
max(iris$Petal.Width),
length = 100))
# make prediction based on supplied values of explanatory variables
y_pred <- predict(m_iris1,
newdata = df_pred)
df_pred <- df_pred %>%
mutate(y_pred = y_pred)
print(df_pred)
iris %>%
ggplot(aes(x = Petal.Width,
y = Petal.Length)) +
geom_point(alpha = 0.5) +
geom_line(data = df_pred,
aes(y = y_pred)) # redefine y values for lines; x and color are inherited from ggplot()
library(tidyverse)
library(dbplyr)
df_fl <- read_csv(here::here("data_raw/data_fish_length.csv"))
library(tidyverse)
library(dbplyr)
df_fl <- read_csv(here::here("data_raw/data_fish_length.csv"))
m <- lm(length ~ lake,
data = df_fl)
mu_a <- df_fl %>%
filter(lake == "a") %>%
pull(length) %>%
mean()
mean <- df_fl %>% group_by(lake) %>%
summarize(mu=mean(length))
mu_b <- df_fl %>%
filter(lake == "b") %>%
pull(length) %>%
mean()
b <- mu_b - mu_a
## lm summary
summary(m)
a <- df_fl %>%
filter(lake == "b") %>%
pull(length)
b <- df_fl %>%
filter(lake == "b") %>%
pull(length)
t.test(b, a)
df_anova <- read_csv(here::here("data_Raw/data_fish_length_anova.csv"))
lm(length ~ lake,
data = df_anova)
df_mu <- df_anova %>%
group_by(lake) %>%
summarize(mu = mean(length)) %>%
arrange(lake) %>%
pull(mu)
m_aov <-aov(length ~ lake, data = df_anova)
summary(m_aov)
iris <- as_tibble(iris)
# develop iris model
m_iris <- lm(Petal.Length ~ Petal.Width + Species,
data = iris)
summary(m_iris)
# create a data frame for prediction
# variable names must be identical to the original dataframe for analysis
n_rep <- 100
df_pred <- tibble(Petal.Width = rep(seq(min(iris$Petal.Width),
max(iris$Petal.Width),
length = n_rep),
n_distinct(iris$Species)),
Species = rep(unique(iris$Species),
each = n_rep))
# make prediction based on supplied values of explanatory variables
y_pred <- predict(m_iris,
newdata = df_pred)
df_pred <- df_pred %>%
mutate(y_pred = y_pred)
print(df_pred)
iris %>%
ggplot(aes(x = Petal.Width,
y = Petal.Length,
color = Species)) +
geom_point(alpha = 0.5) +
geom_line(data = df_pred,
aes(y = y_pred)) # redefine y values for lines; x and color are inherited from ggplot()
s_test <- shapiro.test(m_iris$residuals)
s_test
y_intercept_setosa <- m_iris$coefficients[1]
y_intercept_versicolor <- m_iris$coefficients[3]
y_intercept_virginica <- m_iris$coefficients[4]
ica
x1 <- y_intercept_setosa + y_intercept_versicolor
x2 <- y_intercept_setosa + y_intercept_virginica
# create a data frame for prediction
# variable names must be identical to the original dataframe for analysis
# develop iris model
m_iris1 <- lm(Petal.Length ~ Petal.Width,
data = iris)
summary(m_iris1)
n_rep <- 100
df_pred <- tibble(Petal.Width = seq(min(iris$Petal.Width),
max(iris$Petal.Width),
length = 100))
# make prediction based on supplied values of explanatory variables
y_pred <- predict(m_iris1,
newdata = df_pred)
df_pred <- df_pred %>%
mutate(y_pred = y_pred)
print(df_pred)
iris %>%
ggplot(aes(x = Petal.Width,
y = Petal.Length)) +
geom_point(alpha = 0.5) +
geom_line(data = df_pred,
aes(y = y_pred)) # redefine y values for lines; x and color are inherited from ggplot()
print(df_count)
library(tidyverse)
m_normal <- lm(count ~ nitrate,
df_count)
summary(m_normal)
m_normal %>%  ggplot(y = count, x= nitrate)
m_normal %>%  ggplot(y = count, x= nitrate) %>%
geom_point() %>%
geom_line()
m_normal %>%  ggplot(y = count, x= nitrate) +
geom_point() +
geom_line()
m_normal %>%  ggplot(y = count, x= nitrate) +
geom_point()
m_normal %>%  ggplot(y = count, x= nitrate) +
geom_point(y = count, x= nitrate)
m_normal %>%  ggplot(aes(y = count, x= nitrate) +
m_normal %>%  ggplot(aes(y = count, x= nitrate)) +
geom_point(y = count, x= nitrate)
m_normal %>%  ggplot(aes(y = count, x= nitrate)) +
geom_point(y = count, x= nitrate)
df_count %>%  ggplot(aes(y = count, x= nitrate)) +
geom_point(y = count, x= nitrate)
df_count %>%  ggplot(aes(y = count, x= nitrate))
df_count %>%  ggplot(aes(y = count, x= nitrate)) +
geom_point()
df_count %>%  ggplot(aes(y = count, x= nitrate)) +
geom_point() +
geom_line()
# extract estimates
alpha <- coef(m_normal)[1] # intercept
beta <- coef(m_normal)[2] # slope
df_count %>%
ggplot(aes(x = nitrate,
y = count)) +
geom_point() +
geom_abline(intercept = alpha,
slope = beta)
df_count %>%  ggplot(aes(y = count, x= nitrate)) +
geom_point() +
geom_abline()
df_count %>%  ggplot(aes(y = count, x= nitrate)) +
geom_point() +
geom_abline()
df_count %>%  ggplot(aes(y = count, x= nitrate)) +
geom_point() +
geom_abline(intercept = a, slope = b)
df_count %>%  ggplot(aes(y = count, x= nitrate)) +
geom_point() +
geom_abline(intercept = a, slope = b)
a <- coef(m_normal)[1] # intercept
b <- coef(m_normal)[2] # slope
df_count %>%  ggplot(aes(y = count, x= nitrate)) +
geom_point() +
geom_abline(intercept = a, slope = b)
# extract estimates
alpha <- coef(m_normal)[1] # intercept
beta <- coef(m_normal)[2] # slope
glm(count ~ nitrate,
data = df_count)
glm(count ~ nitrate,
data = df_count,
family = "poisson")
m_pois <- glm(count ~ nitrate,
data = df_count,
family = "poisson")
m_pois
summary(m_pois)
theta <- coef(m_pois)
z_value <- theta/se
theta <- coef(m_pois)
se <- dia(cvov(m_pois))
z_value <- theta/se
se <- dia(cvov(m_pois))
se <- diag(cvov(m_pois))
se <- sqrt(diag(vcov(m_pois)))
theta <- coef(m_pois)
se <- sqrt(diag(vcov(m_pois)))
z_value <- theta/se
df_pred <- tibble(nitrate = seq(min(dfcount$nitrate), max(dfcount$nitrate), length = 100))
df_pred <- tibble(nitrate = seq(min(df_count$nitrate), max(df_count$nitrate), length = 100))
y_hat <- predict(m_pos, newdata = df_pred)
y_hat <- predict(m_pois, newdata = df_pred)
y_hat
y_hat <- predict(m_pois, newdata= df_pred) %>% exp()
df_pred <- tibble(nitrate = seq(min(df_count$nitrate), max(df_count$nitrate), length = 100)) %>%
mutate(y_hat <- predict(m_pois, newdata= df_pred) %>% exp())
df_pred <- tibble(nitrate = seq(min(df_count$nitrate), max(df_count$nitrate), length = 100)) %>%
mutate(y_hat <- predict(m_pois, newdata= df_pred) %>% exp())
df_pred <- tibble(nitrate = seq(min(df_count$nitrate), max(df_count$nitrate), length = 100)) %>%
mutate(y_hat <- predict(m_pois, newdata= .) %>% exp())
mutate(y_hat <- predict(m_pois, newdata= .) %>% exp(), y_norm = predict(m_normal, newdata = .)
df_pred <- tibble(nitrate = seq(min(df_count$nitrate), max(df_count$nitrate), length = 100)) %>%
mutate(y_hat <- predict(m_pois, newdata= .) %>% exp(), y_norm = predict(m_normal, newdata = .))
df_pred <- tibble(nitrate = seq(min(df_count$nitrate), max(df_count$nitrate), length = 100)) %>%
mutate(y_hat <- predict(m_pois, newdata= .) %>% exp(), y_norm = predict(m_normal, newdata = .))
df_count %>%
ggplot(aes(y = count, x = nitrate))
df_count %>%
ggplot(aes(y = count, x = nitrate)) +
geom_point() %>%
geom_line()
df_count %>%
ggplot(aes(y = count, x = nitrate)) +
geom_point() %>%
geom_line(data = geom_pred)
df_count %>%
ggplot(aes(y = count, x = nitrate)) +
geom_point() +
geom_line(data = geom_pred)
df_count %>%
ggplot(aes(y = count, x = nitrate)) +
geom_point() +
geom_line(data = geom_pred)
df_count %>%
ggplot(aes(y = count, x = nitrate)) +
geom_point() +
geom_line(data = df_pred)
df_count %>%
ggplot(aes(y = count, x = nitrate)) +
geom_point() +
geom_line(data = df_pred, as(y = count, x = nitrate))
df_count %>%
ggplot(aes(y = count, x = nitrate)) +
geom_point() +
geom_line(data = df_pred, aes(y = count, x = nitrate))
View(df_pred)
df_count %>%
ggplot(aes(y = count, x = nitrate)) +
geom_point() +
geom_line(data = df_pred, aes(y = y_norm, x = nitrate))
df_pred <- tibble(nitrate = seq(min(df_count$nitrate), max(df_count$nitrate), length = 100)) %>%
mutate(y_hat = predict(m_pois, newdata= .) %>% exp(), y_norm = predict(m_normal, newdata = .))
View(df_pred)
df_count %>%
ggplot(aes(y = count, x = nitrate)) +
geom_point() +
geom_line(data = df_pred, aes(y = y_norm, x = nitrate)) +
geom_line(data = df_pred, aes(y = y_hat, x = nitrate))
df_count %>%
ggplot(aes(y = count, x = nitrate)) +
geom_point() +
geom_line(data = df_pred, aes(y = y_norm, x = nitrate)) +
geom_line(data = df_pred, aes(y = y_pos, x = nitrate))
df_count %>%
ggplot(aes(y = count, x = nitrate)) +
geom_point() +
geom_line(data = df_pred, aes(y = y_norm, x = nitrate)) +
geom_line(data = df_pred, aes(y = y_pois, x = nitrate))
df_pred <- tibble(nitrate = seq(min(df_count$nitrate), max(df_count$nitrate), length = 100)) %>%
mutate(y_pois = predict(m_pois, newdata= .) %>% exp(), y_norm = predict(m_normal, newdata = .))
df_count %>%
ggplot(aes(y = count, x = nitrate)) +
geom_point() +
geom_line(data = df_pred, aes(y = y_norm, x = nitrate)) +
geom_line(data = df_pred, aes(y = y_pois, x = nitrate))
